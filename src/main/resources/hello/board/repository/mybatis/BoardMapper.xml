<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.board.repository.mybatis.BoardMapper">

    <!--countTotalBoard-->
    <select id="countTotalBoard" resultType="Integer">
        select count(*) from board
        <where>
            <if test="category != null and category.name() != 'ALL'">
                and category = #{category}
            </if>
            <if test="keyword != null and keyword != ''">
                and ${option} like concat('%',#{keyword},'%')
            </if>
        </where>
    </select>

    <!--countTotalBoardWithMemberId-->
    <select id="countTotalBoardWithMemberId" resultType="Integer">
        select count(*) from board
        <where>
            member_id = #{memberId}
            <if test="criteria.category != null and criteria.category.name() != 'ALL'">
                and category = #{criteria.category}
            </if>
            <if test="criteria.keyword != null and criteria.keyword != ''">
                and ${criteria.option} like concat('%',#{criteria.keyword},'%')
            </if>
        </where>
    </select>

    <!-- 조회수 증가 -->
    <update id="updateViewCount">
        update board
        set view_count = view_count + 1
        where id = #{id}
    </update>

    <!-- 댓글 갯수 증가 -->
    <update id="addCommentCnt">
        update board
        set comment_cnt = comment_cnt + 1
        where id = #{id}
    </update>

    <!-- 댓글 갯수 감소 -->
    <update id="subtractCommentCnt">
        update board
        set comment_cnt = comment_cnt - #{count}
        where id = #{id}
    </update>

    <!-- findById -->
    <select id="findById" resultType="Board">
        select * from board
        where id = #{id}
    </select>

    <!-- 글 + 댓글 한꺼번에 조회 -->
    <select id="findByIdWithComment" resultType="hello.board.repository.BoardCommentDTO">
        select board.*, comment.comment_id, comment.board_id, comment.target_id,
               comment.writer AS commentWriter, comment.member_id AS commentWriterId,
               comment.target,
               comment.content AS commentContent,
               comment.reg_date AS commentRegDate, comment.update_date AS commentUpdateDate,
               comment.group_id, comment.group_order, comment.group_depth,
               comment.category AS commentCategory
        from board left join comment
            on board.id = comment.board_id
        where board.id = #{id};
    </select>

    <!-- board.id 를 이용해 board.id 가 일치하는 Board 테이블의 행과, comment.boardid = board.id 인 Comment 테이블의 행-->

    <!-- findPagedBoard -->
    <select id="findPagedBoard" resultType="Board">
        select * from board
        <where>
            <if test="category != null and category.name() != 'ALL'">
                and category = #{category}
            </if>
            <if test="keyword != null and keyword != ''">
                and ${option} like concat('%',#{keyword},'%')
            </if>
        </where>
        order by id desc
        limit #{startRowNum}, #{contentPerPage}
    </select>

    <select id="findPagedBoardWithMemberId" resultType="Board">
        select * from board
        <where>
            member_id = #{memberId}
            <if test="criteria.category != null and criteria.category.name() != 'ALL'">
                and category = #{criteria.category}
            </if>
            <if test="criteria.keyword != null and criteria.keyword != ''">
                and ${criteria.option} like concat('%',#{criteria.keyword},'%')
            </if>
        </where>
        order by id desc
        limit #{criteria.startRowNum}, #{criteria.contentPerPage}
    </select>

    <!-- save, 자동생성(auto increment) key 사용 -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into board (title, content, writer, reg_date, update_date, member_id, category)
        values (#{title}, #{content}, #{writer}, #{regDate}, #{updateDate}, #{memberId}, #{category})
    </insert>

    <!-- update -->
    <update id="update">
        update board
        set title=#{updateParam.title},
            writer=#{updateParam.writer},
            content=#{updateParam.content},
            update_date=#{updateParam.updateDate},
            category=#{updateParam.category}
        where id = #{id}
    </update>

    <update id="syncWriter">
        update board
        set writer = #{updateName}
        where member_id = #{memberId}
    </update>

    <!-- delete -->
    <delete id="delete">
        delete from board where id = #{id}
    </delete>


</mapper>

