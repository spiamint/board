<?xml version="1.0" encoding="UTF-8"?>
<configuration>
<!-- logback-local.xml 이면 스프링이 자동인식, properteis 읽음 / logback.xml 은 스프링 띄우기 전이라 properties 못읽음-->

<!--@ TimeBasedRollingPolicy-->
    <!--
    @ TimeBasedRollingPolicy
        %d = dateTime 으로 치환된다.
        application 동작중 log 를 syslog.log 파일에 쌓다가 자정에 해당 패턴의 파일에 아카이브 된다.
            maxHistory 30 = 30일까지 보관후, 다음 아카이빙때 가장 오래된 아카이브 삭제
    -->
<!--@ Pattern (https://logback.qos.ch/manual/layouts.html#conversionWord)-->
    <!--
    @ Pattern (https://logback.qos.ch/manual/layouts.html#conversionWord)

        % FM CW{ OPTION }

        Conversion Word
            %logger{length} : 로거 (클래스)이름 출력.
                length == 0 : 클래스 이름만 출력
                length !=0 : 패키지+클래스 명을 length 길이 까지 출력, 전체 길이가 length 보다 길면 패키지명만 압축.
            %d{pattern} : 시간, pattern = 시간표시패턴
            %level : 레벨 / %thread : 스레드 / %n : 개행 / %message, %msg : 메시지
            %method : 로그 발생시킨 메서드명
            %r :어플시작 ~ 로그 까지 시간출력

        Format Modifier - 생략가능
            ( 포맷 기본은 오른쪽정렬, 아래 례의 % 30 logger{5} 의 출력 참고)
            - : 왼쪽정렬
            Integer : 최소 필드너비. 예시의 % 30 logger{5} 은 30칸을 기본으로 할당한다. 크기 넘어도 자르지 않음.
            .Integer : 최대 필드너비. 지정된 크기 이상의 문자열은 자른다. 최소필드와 같이 사용가능

        참고 (https://ckddn9496.tistory.com/86)
            conversion(%...), formatmodifier (.) 에 \ 이스케이프 사용가능
            replace 통한 텍스트 대체 가능
            coloring, highlight 가능

    -->

    <!-- 로그파일 저장 경로. 이상하게도, 첫경로는 \ , 이후경로는 / 로 해야 정상동작 하더라. -->
    <!-- C:\Users\felix\.Study\Spring_Practice\board 프로젝트 경로가 기본으로 붙음. -->
    <property name="LOG_DIR" value="\log/logback" />

    <!-- CONSOLE 콘솔 로그-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                aCON %highlight(%-5level) %d{yy-MM-dd HH:mm:ss.SSS} [%thread] : %green(%30logger{1}) - %msg%n
            </Pattern>
        </layout>
    </appender>
    <!-- // CONSOLE -->

    <!-- SYSLOG 전체 파일 로그-->
    <appender name="SYSLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/syslog/syslog.log</file>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                aSYS %-5level %d{yy-MM-dd HH:mm:ss.SSS} [%thread] : %30logger - %msg%n
            </Pattern>
        </layout>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/syslog/syslog.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- APPLOG 애플리케이션 파일 로그 -->
    <appender name="APPLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/applog/applog.log</file>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                aApp %-5level %d{yy-MM-dd HH:mm:ss.SSS} [%thread] : %30logger{5} - %msg%n
            </Pattern>
        </layout>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/applog/applog.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- ERRORLOG 에러 파일 로그-->
    <appender name="ERRORLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--LOG LEVEL FILTER, if ERROR true -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <OnMatch>ACCEPT</OnMatch>
            <OnMismatch>DENY</OnMismatch>
        </filter>
        <!-- 작성할 파일 -->
        <file>${LOG_DIR}/errlog/errlog.log</file>
        <!-- 로그 작성 (encoder)-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                aERR %-5level %d{yy-MM-dd HH:mm:ss.SSS} [%thread] : %30logger{5} %n[message] %msg%n
            </Pattern>
        </layout>
        <!-- 새 파일 작성 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/errlog/errlog.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- SQLLOG 파일 로그, 사용X -->
    <appender name="SQLLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/sqllog/sqllog.log</file>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                aSQL %-5level %d{yy-MM-dd HH:mm:ss.SSS} [%thread] : %30logger{5} - %msg%n
            </Pattern>
        </layout>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/sqllog/sqllog.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--
        출력              logger
        콘솔            : root
        syslog.log      : root                  사용X, 이유 = EB 에서 stdout 을 자동으로 파일로 씀.
        applog.log      : hello.board
        errorlog.log    : root
        sqllog.log      : jdbc.sqltiming        사용X
    -->

    <!--
        root.CONSOLE 주석하면 hello.board.CONSOLE, jdbc.sqltiming.CONSOLE 켜줘야 됨. 반대역시 동일
    -->


    <root level="info">
<!--        <appender-ref ref="CONSOLE" />-->
        <appender-ref ref="SYSLOG" />
        <appender-ref ref="ERRORLOG"/>
    </root>

    <logger name="hello.board" level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="APPLOG"/>
    </logger>

    <logger name="jdbc.sqltiming" level="info">
        <appender-ref ref="CONSOLE" />
<!--        <appender-ref ref="SQLLOG" />-->
    </logger>

    <!-- jdbc 관련 로그 다켜짐? 일단 끔 -->
    <logger name="jdbc.sqlonly" level="off"/>
    <logger name="jdbc.audit" level="off" />
    <logger name="jdbc.resultset" level="off" />
    <logger name="jdbc.resultsettable" level="off" />
    <logger name="jdbc.connection" level="off" />

</configuration>